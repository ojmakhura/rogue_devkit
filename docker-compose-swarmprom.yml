version: "3.9"

networks:
  net:
    driver: overlay
    attachable: true
  rogue-public:
    external: true

volumes:
    prometheus: {}
    grafana: {}
    alertmanager: {}

configs:
  dockerd_config:
    file: ${ROGUE_DATA}/caddy/Caddyfile
  # node_rules:
    # file: ${ROGUE_DATA}/prometheus/rules/swarm_node.rules.yml
  # task_rules:
    # file: ${ROGUE_DATA}/prometheus/rules/swarm_task.rules.yml

services:
  dockerd-exporter:
    image: stefanprodan/caddy
    networks:
      - net
    environment:
      - DOCKER_GWBRIDGE_IP=172.18.0.1
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    command: -logtostderr -docker_only
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: true
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: true
      - type: bind
        source: /dev/disk
        target: /dev/disk
        read_only: true                        
    networks:
      - net

  grafana:
    image: grafana/grafana:10.0.0
    user: "$UID:$GID"
    # ports:
    #   - target: 3000
    #     published: 3000
    #     protocol: tcp
    #     mode: ingress
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.rogue_portainer == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=rogue-public
        - traefik.constraint-label=rogue-public
        - traefik.http.routers.swarmprom-grafana-http.rule=Host(`${GRAFANA_DOMAIN}`)
        - traefik.http.routers.swarmprom-grafana-http.entrypoints=web
        - traefik.http.routers.swarmprom-grafana-http.middlewares=https-redirect
        - traefik.http.routers.swarmprom-grafana-https.rule=Host(`${GRAFANA_DOMAIN}`)
        - traefik.http.routers.swarmprom-grafana-https.entrypoints=websecure
        - traefik.http.routers.swarmprom-grafana-https.tls=${SSL_SECURE}
        # - traefik.http.routers.swarmprom-grafana-https.tls.certresolver=le
        - traefik.http.services.swarmprom-grafana.loadbalancer.server.port=3000
    volumes:
      - type: bind
        source: ${ROGUE_DATA}/grafana/data
        target: /var/lib/grafana
      - type: bind
        source: ${ROGUE_DATA}/grafana/config/grafana-datasources.yml
        target: /etc/grafana/provisioning/datasources/provisioning-datasources.yaml
      - type: bind
        source: ${ROGUE_DATA}/grafana/config/grafana-dashboards.yml
        target: /etc/grafana/provisioning/dashboards/provisioning-dashboards.yaml
      - type: bind
        source: ${ROGUE_DATA}/grafana/config/dashboards/grafana-dashboard-container-metrics.json
        target: /var/lib/grafana/dashboards/container-metrics.json
      - type: bind
        source: ${ROGUE_DATA}/grafana/config/dashboards/grafana-dashboard-node-metrics.json
        target: /var/lib/grafana/dashboards/node-metrics.json
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - net
      - rogue-public   

  alertmanager:
    image: stefanprodan/swarmprom-alertmanager:v0.14.0
    networks:
      - default
      - net
      - rogue-public
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
      - SLACK_USER=${SLACK_USER:-alertmanager}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
        # - ${ROGUE_DATA}/auth/system_passwd:/var/system_passwd
      # - ./swarmprom_passwd:/swarmprom_passwd
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.docker.network=rogue-public
        - traefik.constraint-label=rogue-public
        - traefik.http.routers.swarmprom-alertmanager-http.rule=Host(`alertmanager.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-alertmanager-http.entrypoints=${WEB_ENTRY}
        - traefik.http.routers.swarmprom-alertmanager-http.middlewares=https-redirect
        - traefik.http.routers.swarmprom-alertmanager-https.rule=Host(`alertmanager.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-alertmanager-https.entrypoints=${WEBSECURE_ENTRY}
        - traefik.http.routers.swarmprom-alertmanager-https.tls=${SSL_SECURE}
        - traefik.http.routers.swarmprom-alertmanager-https.tls.certresolver=le
        - traefik.http.services.swarmprom-alertmanager.loadbalancer.server.port=9093
        # - traefik.http.middlewares.swarmprom-alertmanager-auth.basicauth.usersfile=/var/system_passwd
        # - traefik.http.routers.swarmprom-alertmanager-https.middlewares=swarmprom-alertmanager-auth

  unsee:
    image: cloudflare/unsee:v0.9.2
    networks:
      - default
      - net
      - rogue-public
    # volumes:
      # - ${ROGUE_DATA}/auth/system_passwd:/var/system_passwd
    environment:
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=rogue-public
        - traefik.constraint-label=rogue-public
        - traefik.http.routers.swarmprom-unsee-http.rule=Host(`unsee.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-unsee-http.entrypoints=${WEB_ENTRY}
        - traefik.http.routers.swarmprom-unsee-http.middlewares=https-redirect
        - traefik.http.routers.swarmprom-unsee-https.rule=Host(`unsee.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-unsee-https.entrypoints=${WEBSECURE_ENTRY}
        - traefik.http.routers.swarmprom-unsee-https.tls=${SSL_SECURE}
        - traefik.http.routers.swarmprom-unsee-https.tls.certresolver=le
        - traefik.http.services.swarmprom-unsee.loadbalancer.server.port=8080
        # - traefik.http.middlewares.swarmprom-unsee-auth.basicauth.usersfile=/var/system_passwd
        # - traefik.http.routers.swarmprom-unsee-https.middlewares=swarmprom-unsee-auth

  node-exporter:
    image: bitnami/node-exporter:1.6.0
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
    networks:
      - net

  prometheus:
    image: bitnami/prometheus:2.44.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=error'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.rogue_portainer == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=rogue-public
        - traefik.constraint-label=rogue-public
        - traefik.http.routers.swarmprom-prometheus-http.rule=Host(`prometheus.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-prometheus-http.entrypoints=web
        - traefik.http.routers.swarmprom-prometheus-http.middlewares=https-redirect
        - traefik.http.routers.swarmprom-prometheus-https.rule=Host(`prometheus.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-prometheus-https.entrypoints=websecure
        - traefik.http.routers.swarmprom-prometheus-https.tls=${SSL_SECURE}
        - traefik.http.routers.swarmprom-prometheus-https.tls.certresolver=le
        - traefik.http.services.swarmprom-prometheus.loadbalancer.server.port=9090
        # - traefik.http.middlewares.swarmprom-prometheus-auth.basicauth.usersfile=/var/system_passwd
        # - traefik.http.routers.swarmprom-prometheus-https.middlewares=swarmprom-prometheus-auth
    volumes:
      - type: bind
        source: ${ROGUE_DATA}/prometheus/data
        target: /prometheus
      - type: bind
        source: ${ROGUE_DATA}/prometheus/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
      # - type: bind
        # source: ${ROGUE_DATA}/hosts
        # target: /etc/hosts
    environment:
      METRICS_PATH: /actuator/prometheus
      TARGETS: ${API_URL}
    networks:
      - net
      - rogue-public
